// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ironic/ironicCom.proto

package ironic

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//调用方编码
type AppKey int32

const (
	AppKey_UNDEFINED AppKey = 0
	//裸金属应用
	AppKey_IRONICAPP AppKey = 1000010000
	//CMDB平台
	AppKey_CMDB AppKey = 2000020000
)

var AppKey_name = map[int32]string{
	0:          "UNDEFINED",
	1000010000: "IRONICAPP",
	2000020000: "CMDB",
}

var AppKey_value = map[string]int32{
	"UNDEFINED": 0,
	"IRONICAPP": 1000010000,
	"CMDB":      2000020000,
}

func (x AppKey) String() string {
	return proto.EnumName(AppKey_name, int32(x))
}

func (AppKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{0}
}

//服务编码
type SvcCode int32

const (
	SvcCode_SVCCODEDEFAULT SvcCode = 0
	//创建裸金属节点
	SvcCode_CREATENODES SvcCode = 1010010001
	//查询裸金属状态
	SvcCode_QRYNODEINFO SvcCode = 1010010002
	//安装裸金属系统
	SvcCode_INSTALLNODESYS SvcCode = 1010010003
	//操作裸金属实例电源
	SvcCode_OPERNODEPOWER SvcCode = 1010010004
)

var SvcCode_name = map[int32]string{
	0:          "SVCCODEDEFAULT",
	1010010001: "CREATENODES",
	1010010002: "QRYNODEINFO",
	1010010003: "INSTALLNODESYS",
	1010010004: "OPERNODEPOWER",
}

var SvcCode_value = map[string]int32{
	"SVCCODEDEFAULT": 0,
	"CREATENODES":    1010010001,
	"QRYNODEINFO":    1010010002,
	"INSTALLNODESYS": 1010010003,
	"OPERNODEPOWER":  1010010004,
}

func (x SvcCode) String() string {
	return proto.EnumName(SvcCode_name, int32(x))
}

func (SvcCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{1}
}

//响应码
type ResultCode int32

const (
	//成功
	ResultCode_SUCCESS ResultCode = 0
	//失败
	ResultCode_FAIL ResultCode = 1
)

var ResultCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var ResultCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x ResultCode) String() string {
	return proto.EnumName(ResultCode_name, int32(x))
}

func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{2}
}

// 分页信息(每个服务通用的控制信息，当客户端发起请求时，信息填写如下)
type PageInfo struct {
	// 当前页
	PageIndex int32 `protobuf:"varint,1,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 总页数
	PageCount int32 `protobuf:"varint,3,opt,name=pageCount,proto3" json:"pageCount,omitempty"`
	// 总记录数
	RowCount             int32    `protobuf:"varint,4,opt,name=rowCount,proto3" json:"rowCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{0}
}

func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageInfo.Unmarshal(m, b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return xxx_messageInfo_PageInfo.Size(m)
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPageIndex() int32 {
	if m != nil {
		return m.PageIndex
	}
	return 0
}

func (m *PageInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageInfo) GetPageCount() int32 {
	if m != nil {
		return m.PageCount
	}
	return 0
}

func (m *PageInfo) GetRowCount() int32 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

// 查询范围信息(继承PageInfo。详情查询类服务中，用于指定具体子表的查询范围及分页信息。)
type ScopeInfo struct {
	// 范围编码
	Scope string `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// 当前页
	PageIndex int32 `protobuf:"varint,2,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	// 每页数量
	PageSize int32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 总页数
	PageCount int32 `protobuf:"varint,4,opt,name=pageCount,proto3" json:"pageCount,omitempty"`
	// 总记录数
	RowCount             int32    `protobuf:"varint,5,opt,name=rowCount,proto3" json:"rowCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScopeInfo) Reset()         { *m = ScopeInfo{} }
func (m *ScopeInfo) String() string { return proto.CompactTextString(m) }
func (*ScopeInfo) ProtoMessage()    {}
func (*ScopeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{1}
}

func (m *ScopeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScopeInfo.Unmarshal(m, b)
}
func (m *ScopeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScopeInfo.Marshal(b, m, deterministic)
}
func (m *ScopeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeInfo.Merge(m, src)
}
func (m *ScopeInfo) XXX_Size() int {
	return xxx_messageInfo_ScopeInfo.Size(m)
}
func (m *ScopeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeInfo proto.InternalMessageInfo

func (m *ScopeInfo) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ScopeInfo) GetPageIndex() int32 {
	if m != nil {
		return m.PageIndex
	}
	return 0
}

func (m *ScopeInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ScopeInfo) GetPageCount() int32 {
	if m != nil {
		return m.PageCount
	}
	return 0
}

func (m *ScopeInfo) GetRowCount() int32 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

// 时间范围信息(用于指定时间范围。如按受理开始时间、受理结束时间查询订单列表。按某个具体时间查询，不使用此对象。)
type TimeScope struct {
	// 起始时间
	BeginDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=beginDate,proto3" json:"beginDate,omitempty"`
	// 结束时间
	EndDate              *timestamp.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimeScope) Reset()         { *m = TimeScope{} }
func (m *TimeScope) String() string { return proto.CompactTextString(m) }
func (*TimeScope) ProtoMessage()    {}
func (*TimeScope) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{2}
}

func (m *TimeScope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeScope.Unmarshal(m, b)
}
func (m *TimeScope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeScope.Marshal(b, m, deterministic)
}
func (m *TimeScope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeScope.Merge(m, src)
}
func (m *TimeScope) XXX_Size() int {
	return xxx_messageInfo_TimeScope.Size(m)
}
func (m *TimeScope) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeScope.DiscardUnknown(m)
}

var xxx_messageInfo_TimeScope proto.InternalMessageInfo

func (m *TimeScope) GetBeginDate() *timestamp.Timestamp {
	if m != nil {
		return m.BeginDate
	}
	return nil
}

func (m *TimeScope) GetEndDate() *timestamp.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// 控制对象(每个服务通用的控制信息，当客户端发起请求时，信息填写如下)
type TcpContReq struct {
	// 服务编码
	SvcCode SvcCode `protobuf:"varint,1,opt,name=svcCode,proto3,enum=ironicCom.SvcCode" json:"svcCode,omitempty"`
	// 能力编码
	ApiCode string `protobuf:"bytes,2,opt,name=apiCode,proto3" json:"apiCode,omitempty"`
	// 调用方编码
	AppKey AppKey `protobuf:"varint,3,opt,name=appKey,proto3,enum=ironicCom.AppKey" json:"appKey,omitempty"`
	// 提供方编码
	DstSysID AppKey `protobuf:"varint,4,opt,name=dstSysID,proto3,enum=ironicCom.AppKey" json:"dstSysID,omitempty"`
	// 交易流水号
	TransactionID string `protobuf:"bytes,5,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	// 请求时间
	ReqTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=reqTime,proto3" json:"reqTime,omitempty"`
	// 签名字符串
	Sign string `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
	// 服务版本
	Version              string   `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpContReq) Reset()         { *m = TcpContReq{} }
func (m *TcpContReq) String() string { return proto.CompactTextString(m) }
func (*TcpContReq) ProtoMessage()    {}
func (*TcpContReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{3}
}

func (m *TcpContReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpContReq.Unmarshal(m, b)
}
func (m *TcpContReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpContReq.Marshal(b, m, deterministic)
}
func (m *TcpContReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpContReq.Merge(m, src)
}
func (m *TcpContReq) XXX_Size() int {
	return xxx_messageInfo_TcpContReq.Size(m)
}
func (m *TcpContReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpContReq.DiscardUnknown(m)
}

var xxx_messageInfo_TcpContReq proto.InternalMessageInfo

func (m *TcpContReq) GetSvcCode() SvcCode {
	if m != nil {
		return m.SvcCode
	}
	return SvcCode_SVCCODEDEFAULT
}

func (m *TcpContReq) GetApiCode() string {
	if m != nil {
		return m.ApiCode
	}
	return ""
}

func (m *TcpContReq) GetAppKey() AppKey {
	if m != nil {
		return m.AppKey
	}
	return AppKey_UNDEFINED
}

func (m *TcpContReq) GetDstSysID() AppKey {
	if m != nil {
		return m.DstSysID
	}
	return AppKey_UNDEFINED
}

func (m *TcpContReq) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *TcpContReq) GetReqTime() *timestamp.Timestamp {
	if m != nil {
		return m.ReqTime
	}
	return nil
}

func (m *TcpContReq) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *TcpContReq) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// 控制对象(每个服务通用的控制信息，当服务端反馈应答时，信息填写如下)
type TcpContRes struct {
	// 交易流水号
	TransactionID string `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	// 应答时间
	ReqTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=reqTime,proto3" json:"reqTime,omitempty"`
	// 签名字符串
	Sign                 string   `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpContRes) Reset()         { *m = TcpContRes{} }
func (m *TcpContRes) String() string { return proto.CompactTextString(m) }
func (*TcpContRes) ProtoMessage()    {}
func (*TcpContRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ba10cbdbb832423, []int{4}
}

func (m *TcpContRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpContRes.Unmarshal(m, b)
}
func (m *TcpContRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpContRes.Marshal(b, m, deterministic)
}
func (m *TcpContRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpContRes.Merge(m, src)
}
func (m *TcpContRes) XXX_Size() int {
	return xxx_messageInfo_TcpContRes.Size(m)
}
func (m *TcpContRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpContRes.DiscardUnknown(m)
}

var xxx_messageInfo_TcpContRes proto.InternalMessageInfo

func (m *TcpContRes) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *TcpContRes) GetReqTime() *timestamp.Timestamp {
	if m != nil {
		return m.ReqTime
	}
	return nil
}

func (m *TcpContRes) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func init() {
	proto.RegisterEnum("ironicCom.AppKey", AppKey_name, AppKey_value)
	proto.RegisterEnum("ironicCom.SvcCode", SvcCode_name, SvcCode_value)
	proto.RegisterEnum("ironicCom.ResultCode", ResultCode_name, ResultCode_value)
	proto.RegisterType((*PageInfo)(nil), "ironicCom.PageInfo")
	proto.RegisterType((*ScopeInfo)(nil), "ironicCom.ScopeInfo")
	proto.RegisterType((*TimeScope)(nil), "ironicCom.TimeScope")
	proto.RegisterType((*TcpContReq)(nil), "ironicCom.TcpContReq")
	proto.RegisterType((*TcpContRes)(nil), "ironicCom.TcpContRes")
}

func init() { proto.RegisterFile("ironic/ironicCom.proto", fileDescriptor_0ba10cbdbb832423) }

var fileDescriptor_0ba10cbdbb832423 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x6c, 0x3e, 0x1a, 0xc7, 0xaf, 0x34, 0x72, 0x17, 0xa8, 0xac, 0x0a, 0x09, 0x94, 0x22, 0x04,
	0x15, 0x38, 0x52, 0xe1, 0xd0, 0x6b, 0x6a, 0x3b, 0x92, 0x45, 0x48, 0xcc, 0x3a, 0x05, 0x95, 0x0b,
	0x72, 0x9c, 0x8d, 0x65, 0xa9, 0xf1, 0xba, 0xde, 0x4d, 0x69, 0x0b, 0xe2, 0x2f, 0xf0, 0x7d, 0xe7,
	0x67, 0xc0, 0x9d, 0x33, 0x57, 0x2e, 0x5c, 0xe0, 0xca, 0x9f, 0x40, 0xde, 0xb5, 0x93, 0x16, 0x50,
	0x2b, 0x4e, 0xde, 0x99, 0x37, 0xcf, 0x3b, 0x6f, 0x76, 0xb5, 0xb0, 0x1a, 0xa5, 0x34, 0x8e, 0x82,
	0x96, 0xfc, 0x98, 0x74, 0x62, 0x24, 0x29, 0xe5, 0x14, 0xa9, 0x33, 0x62, 0xed, 0x6a, 0x48, 0x69,
	0xb8, 0x47, 0x5a, 0xa2, 0x30, 0x9c, 0x8e, 0x5b, 0x3c, 0x9a, 0x10, 0xc6, 0xfd, 0x49, 0x22, 0xb5,
	0xcd, 0x97, 0x50, 0x77, 0xfd, 0x90, 0x38, 0xf1, 0x98, 0xa2, 0x2b, 0xa0, 0x26, 0x62, 0x3d, 0x22,
	0x87, 0x7a, 0xe9, 0x5a, 0xe9, 0xe6, 0x22, 0x9e, 0x13, 0x68, 0x0d, 0xea, 0x19, 0xf0, 0xa2, 0x63,
	0xa2, 0x97, 0x45, 0x71, 0x86, 0x8b, 0x4e, 0x93, 0x4e, 0x63, 0xae, 0x57, 0xe6, 0x9d, 0x82, 0xc8,
	0x3a, 0x53, 0xfa, 0x4c, 0x16, 0xab, 0xb2, 0xb3, 0xc0, 0xcd, 0x0f, 0x25, 0x50, 0xbd, 0x80, 0x26,
	0xd2, 0xc1, 0x25, 0x58, 0x64, 0x19, 0x10, 0xbb, 0xab, 0x58, 0x82, 0xd3, 0xbe, 0xca, 0x67, 0xf9,
	0xaa, 0x9c, 0xe5, 0xab, 0x7a, 0x96, 0xaf, 0xc5, 0x3f, 0x7c, 0x3d, 0x07, 0x75, 0x10, 0x4d, 0x88,
	0xb0, 0x86, 0xb6, 0x40, 0x1d, 0x92, 0x30, 0x8a, 0x2d, 0x9f, 0x4b, 0x6b, 0x4b, 0x9b, 0x6b, 0x86,
	0x4c, 0xd6, 0x28, 0x92, 0x35, 0x06, 0x45, 0xb2, 0x78, 0x2e, 0x46, 0xf7, 0x40, 0x21, 0xf1, 0x48,
	0xf4, 0x95, 0xcf, 0xed, 0x2b, 0xa4, 0xcd, 0x4f, 0x65, 0x80, 0x41, 0x90, 0x98, 0x34, 0xe6, 0x98,
	0xec, 0xa3, 0xdb, 0xa0, 0xb0, 0x83, 0xc0, 0xa4, 0x23, 0xb9, 0x79, 0x63, 0x13, 0x19, 0xf3, 0x23,
	0xf7, 0x64, 0x05, 0x17, 0x12, 0xa4, 0x83, 0xe2, 0x27, 0x91, 0x50, 0x97, 0x45, 0x8a, 0x05, 0x44,
	0xb7, 0xa0, 0xe6, 0x27, 0xc9, 0x7d, 0x72, 0x24, 0x72, 0x6a, 0x6c, 0xae, 0x9c, 0xf8, 0x4d, 0x5b,
	0x14, 0x70, 0x2e, 0x40, 0x77, 0xa0, 0x3e, 0x62, 0xdc, 0x3b, 0x62, 0x8e, 0x25, 0x72, 0xfb, 0xa7,
	0x78, 0x26, 0x41, 0xd7, 0x61, 0x99, 0xa7, 0x7e, 0xcc, 0xfc, 0x80, 0x47, 0x34, 0x76, 0x2c, 0x11,
	0xa7, 0x8a, 0x4f, 0x93, 0x59, 0x18, 0x29, 0xd9, 0xcf, 0xe6, 0xd5, 0x6b, 0xe7, 0x87, 0x91, 0x4b,
	0x11, 0x82, 0x2a, 0x8b, 0xc2, 0x58, 0x57, 0xc4, 0x2f, 0xc5, 0x3a, 0x9b, 0xf1, 0x80, 0xa4, 0x2c,
	0xa2, 0xb1, 0x5e, 0x97, 0x33, 0xe6, 0xb0, 0xf9, 0xe2, 0x44, 0x72, 0xec, 0x6f, 0x5f, 0xa5, 0x73,
	0x7c, 0x95, 0xff, 0xdf, 0x57, 0x65, 0xee, 0x6b, 0x63, 0x0b, 0x6a, 0x32, 0x1b, 0xb4, 0x0c, 0xea,
	0x4e, 0xcf, 0xb2, 0x3b, 0x4e, 0xcf, 0xb6, 0xb4, 0x05, 0xb4, 0x02, 0xaa, 0x83, 0xfb, 0x3d, 0xc7,
	0x6c, 0xbb, 0xae, 0xf6, 0xfa, 0xe7, 0xaf, 0xef, 0x15, 0x74, 0x01, 0xaa, 0xe6, 0x03, 0x6b, 0x5b,
	0xfb, 0xf8, 0xe5, 0xdb, 0x67, 0x65, 0xe3, 0x00, 0x94, 0xfc, 0x24, 0x11, 0x82, 0x86, 0xf7, 0xc8,
	0x34, 0xfb, 0x96, 0x6d, 0xd9, 0x9d, 0xf6, 0x4e, 0x77, 0xa0, 0x2d, 0xa0, 0x8b, 0xb0, 0x64, 0x62,
	0xbb, 0x3d, 0xb0, 0x7b, 0x7d, 0xcb, 0xf6, 0xb4, 0x37, 0xaf, 0xbe, 0xfe, 0xa8, 0x64, 0xe4, 0x43,
	0xbc, 0x9b, 0x31, 0x4e, 0xaf, 0xd3, 0xd7, 0xde, 0x0a, 0x72, 0x15, 0x1a, 0x4e, 0xcf, 0x1b, 0xb4,
	0xbb, 0x5d, 0x21, 0xdd, 0xf5, 0xb4, 0x77, 0x82, 0xbf, 0x0c, 0xcb, 0x7d, 0xd7, 0xc6, 0x19, 0xe9,
	0xf6, 0x1f, 0xdb, 0x58, 0x7b, 0x9f, 0xd1, 0x1b, 0xeb, 0x00, 0x98, 0xb0, 0xe9, 0x1e, 0x17, 0x5b,
	0x2f, 0x81, 0xe2, 0xed, 0x98, 0xa6, 0xed, 0x79, 0xda, 0x02, 0xaa, 0x43, 0xb5, 0xd3, 0x76, 0xba,
	0x5a, 0x69, 0xfb, 0x29, 0xac, 0x07, 0x74, 0x62, 0x8c, 0xc7, 0x01, 0x33, 0x0e, 0x27, 0xe9, 0x28,
	0xc8, 0xef, 0x82, 0x31, 0x8c, 0x8e, 0xe7, 0xd7, 0x62, 0xbb, 0x31, 0x5b, 0xba, 0x59, 0x6e, 0x6e,
	0xe9, 0xc9, 0x8d, 0x30, 0xe2, 0xc6, 0x98, 0x86, 0xc1, 0x28, 0x36, 0x38, 0x4d, 0x5a, 0xfe, 0x61,
	0xfe, 0x14, 0xb1, 0x56, 0x48, 0xe9, 0x94, 0xe7, 0x4f, 0xd7, 0xb0, 0x26, 0xc8, 0xbb, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x78, 0x27, 0x4a, 0x32, 0xd2, 0x04, 0x00, 0x00,
}
