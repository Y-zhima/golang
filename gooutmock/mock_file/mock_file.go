// Code generated by MockGen. DO NOT EDIT.
// Source: git.fogcdn.top/axe/protos/goout/file (interfaces: FileClient)

// Package mock_file is a generated GoMock package.
package mock_file

import (
	context "context"
	file "git.fogcdn.top/axe/protos/goout/file"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFileClient is a mock of FileClient interface
type MockFileClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileClientMockRecorder
}

// MockFileClientMockRecorder is the mock recorder for MockFileClient
type MockFileClientMockRecorder struct {
	mock *MockFileClient
}

// NewMockFileClient creates a new mock instance
func NewMockFileClient(ctrl *gomock.Controller) *MockFileClient {
	mock := &MockFileClient{ctrl: ctrl}
	mock.recorder = &MockFileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileClient) EXPECT() *MockFileClientMockRecorder {
	return m.recorder
}

// DownloadTemplate mocks base method
func (m *MockFileClient) DownloadTemplate(arg0 context.Context, arg1 *file.DownloadTemplateRequest, arg2 ...grpc.CallOption) (*file.DownloadTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadTemplate", varargs...)
	ret0, _ := ret[0].(*file.DownloadTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTemplate indicates an expected call of DownloadTemplate
func (mr *MockFileClientMockRecorder) DownloadTemplate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTemplate", reflect.TypeOf((*MockFileClient)(nil).DownloadTemplate), varargs...)
}

// Upload mocks base method
func (m *MockFileClient) Upload(arg0 context.Context, arg1 *file.UploadRequest, arg2 ...grpc.CallOption) (*file.UploadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upload", varargs...)
	ret0, _ := ret[0].(*file.UploadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockFileClientMockRecorder) Upload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileClient)(nil).Upload), varargs...)
}

// UploadPlaybook mocks base method
func (m *MockFileClient) UploadPlaybook(arg0 context.Context, arg1 *file.UploadPlaybookRequest, arg2 ...grpc.CallOption) (*file.UploadPlaybookResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPlaybook", varargs...)
	ret0, _ := ret[0].(*file.UploadPlaybookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPlaybook indicates an expected call of UploadPlaybook
func (mr *MockFileClientMockRecorder) UploadPlaybook(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPlaybook", reflect.TypeOf((*MockFileClient)(nil).UploadPlaybook), varargs...)
}
