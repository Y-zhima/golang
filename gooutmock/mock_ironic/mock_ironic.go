// Code generated by MockGen. DO NOT EDIT.
// Source: git.fogcdn.top/axe/protos/goout/ironic (interfaces: IronicServerClient)

// Package mock_ironic is a generated GoMock package.
package mock_ironic

import (
	context "context"
	ironic "git.fogcdn.top/axe/protos/goout/ironic"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockIronicServerClient is a mock of IronicServerClient interface
type MockIronicServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIronicServerClientMockRecorder
}

// MockIronicServerClientMockRecorder is the mock recorder for MockIronicServerClient
type MockIronicServerClientMockRecorder struct {
	mock *MockIronicServerClient
}

// NewMockIronicServerClient creates a new mock instance
func NewMockIronicServerClient(ctrl *gomock.Controller) *MockIronicServerClient {
	mock := &MockIronicServerClient{ctrl: ctrl}
	mock.recorder = &MockIronicServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIronicServerClient) EXPECT() *MockIronicServerClientMockRecorder {
	return m.recorder
}

// CreateNodes mocks base method
func (m *MockIronicServerClient) CreateNodes(arg0 context.Context, arg1 *ironic.CreateNodesRootReq, arg2 ...grpc.CallOption) (*ironic.CreateNodesRootRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNodes", varargs...)
	ret0, _ := ret[0].(*ironic.CreateNodesRootRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodes indicates an expected call of CreateNodes
func (mr *MockIronicServerClientMockRecorder) CreateNodes(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodes", reflect.TypeOf((*MockIronicServerClient)(nil).CreateNodes), varargs...)
}

// InstallNodeSys mocks base method
func (m *MockIronicServerClient) InstallNodeSys(arg0 context.Context, arg1 *ironic.InstallNodeSysRootReq, arg2 ...grpc.CallOption) (*ironic.InstallNodeSysRootRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallNodeSys", varargs...)
	ret0, _ := ret[0].(*ironic.InstallNodeSysRootRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallNodeSys indicates an expected call of InstallNodeSys
func (mr *MockIronicServerClientMockRecorder) InstallNodeSys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallNodeSys", reflect.TypeOf((*MockIronicServerClient)(nil).InstallNodeSys), varargs...)
}

// OperNodePower mocks base method
func (m *MockIronicServerClient) OperNodePower(arg0 context.Context, arg1 *ironic.OperNodePowerRootReq, arg2 ...grpc.CallOption) (*ironic.OperNodePowerRootRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperNodePower", varargs...)
	ret0, _ := ret[0].(*ironic.OperNodePowerRootRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperNodePower indicates an expected call of OperNodePower
func (mr *MockIronicServerClientMockRecorder) OperNodePower(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperNodePower", reflect.TypeOf((*MockIronicServerClient)(nil).OperNodePower), varargs...)
}

// QryHeartbeat mocks base method
func (m *MockIronicServerClient) QryHeartbeat(arg0 context.Context, arg1 *ironic.QryHeartbeatRootReq, arg2 ...grpc.CallOption) (*ironic.QryHeartbeatRootRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QryHeartbeat", varargs...)
	ret0, _ := ret[0].(*ironic.QryHeartbeatRootRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QryHeartbeat indicates an expected call of QryHeartbeat
func (mr *MockIronicServerClientMockRecorder) QryHeartbeat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QryHeartbeat", reflect.TypeOf((*MockIronicServerClient)(nil).QryHeartbeat), varargs...)
}

// QryNodeInfo mocks base method
func (m *MockIronicServerClient) QryNodeInfo(arg0 context.Context, arg1 *ironic.QryNodeInfoRootReq, arg2 ...grpc.CallOption) (*ironic.QryNodeInfoRootRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QryNodeInfo", varargs...)
	ret0, _ := ret[0].(*ironic.QryNodeInfoRootRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QryNodeInfo indicates an expected call of QryNodeInfo
func (mr *MockIronicServerClientMockRecorder) QryNodeInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QryNodeInfo", reflect.TypeOf((*MockIronicServerClient)(nil).QryNodeInfo), varargs...)
}

// ReInstallNodeSys mocks base method
func (m *MockIronicServerClient) ReInstallNodeSys(arg0 context.Context, arg1 *ironic.ReInstallNodeSysRootReq, arg2 ...grpc.CallOption) (*ironic.ReInstallNodeSysRootRsp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReInstallNodeSys", varargs...)
	ret0, _ := ret[0].(*ironic.ReInstallNodeSysRootRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReInstallNodeSys indicates an expected call of ReInstallNodeSys
func (mr *MockIronicServerClientMockRecorder) ReInstallNodeSys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReInstallNodeSys", reflect.TypeOf((*MockIronicServerClient)(nil).ReInstallNodeSys), varargs...)
}
