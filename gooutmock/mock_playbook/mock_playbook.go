// Code generated by MockGen. DO NOT EDIT.
// Source: git.fogcdn.top/axe/protos/goout/playbook (interfaces: PlaybookClient)

// Package mock_playbook is a generated GoMock package.
package mock_playbook

import (
	context "context"
	playbook "git.fogcdn.top/axe/protos/goout/playbook"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPlaybookClient is a mock of PlaybookClient interface
type MockPlaybookClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlaybookClientMockRecorder
}

// MockPlaybookClientMockRecorder is the mock recorder for MockPlaybookClient
type MockPlaybookClientMockRecorder struct {
	mock *MockPlaybookClient
}

// NewMockPlaybookClient creates a new mock instance
func NewMockPlaybookClient(ctrl *gomock.Controller) *MockPlaybookClient {
	mock := &MockPlaybookClient{ctrl: ctrl}
	mock.recorder = &MockPlaybookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlaybookClient) EXPECT() *MockPlaybookClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPlaybookClient) Create(arg0 context.Context, arg1 *playbook.CreateRequest, arg2 ...grpc.CallOption) (*playbook.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*playbook.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPlaybookClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaybookClient)(nil).Create), varargs...)
}

// Filter mocks base method
func (m *MockPlaybookClient) Filter(arg0 context.Context, arg1 *playbook.FilterRequest, arg2 ...grpc.CallOption) (*playbook.FilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(*playbook.FilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter
func (mr *MockPlaybookClientMockRecorder) Filter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPlaybookClient)(nil).Filter), varargs...)
}

// Get mocks base method
func (m *MockPlaybookClient) Get(arg0 context.Context, arg1 *playbook.GetRequest, arg2 ...grpc.CallOption) (*playbook.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*playbook.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPlaybookClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaybookClient)(nil).Get), varargs...)
}

// SaveVersion mocks base method
func (m *MockPlaybookClient) SaveVersion(arg0 context.Context, arg1 *playbook.SaveVersionRequest, arg2 ...grpc.CallOption) (*playbook.SaveVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveVersion", varargs...)
	ret0, _ := ret[0].(*playbook.SaveVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveVersion indicates an expected call of SaveVersion
func (mr *MockPlaybookClientMockRecorder) SaveVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVersion", reflect.TypeOf((*MockPlaybookClient)(nil).SaveVersion), varargs...)
}

// Update mocks base method
func (m *MockPlaybookClient) Update(arg0 context.Context, arg1 *playbook.UpdateRequest, arg2 ...grpc.CallOption) (*playbook.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*playbook.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPlaybookClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaybookClient)(nil).Update), varargs...)
}
