// Code generated by MockGen. DO NOT EDIT.
// Source: git.fogcdn.top/axe/protos/goout/subtask (interfaces: SubTaskClient)

// Package mock_subtask is a generated GoMock package.
package mock_subtask

import (
	context "context"
	subtask "git.fogcdn.top/axe/protos/goout/subtask"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSubTaskClient is a mock of SubTaskClient interface
type MockSubTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockSubTaskClientMockRecorder
}

// MockSubTaskClientMockRecorder is the mock recorder for MockSubTaskClient
type MockSubTaskClientMockRecorder struct {
	mock *MockSubTaskClient
}

// NewMockSubTaskClient creates a new mock instance
func NewMockSubTaskClient(ctrl *gomock.Controller) *MockSubTaskClient {
	mock := &MockSubTaskClient{ctrl: ctrl}
	mock.recorder = &MockSubTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubTaskClient) EXPECT() *MockSubTaskClientMockRecorder {
	return m.recorder
}

// Complete mocks base method
func (m *MockSubTaskClient) Complete(arg0 context.Context, arg1 *subtask.CompleteRequest, arg2 ...grpc.CallOption) (*subtask.CompleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Complete", varargs...)
	ret0, _ := ret[0].(*subtask.CompleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Complete indicates an expected call of Complete
func (mr *MockSubTaskClientMockRecorder) Complete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockSubTaskClient)(nil).Complete), varargs...)
}

// Create mocks base method
func (m *MockSubTaskClient) Create(arg0 context.Context, arg1 *subtask.CreateRequest, arg2 ...grpc.CallOption) (*subtask.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*subtask.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSubTaskClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubTaskClient)(nil).Create), varargs...)
}

// CreateServer mocks base method
func (m *MockSubTaskClient) CreateServer(arg0 context.Context, arg1 *subtask.CreateServerRequest, arg2 ...grpc.CallOption) (*subtask.CreateServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServer", varargs...)
	ret0, _ := ret[0].(*subtask.CreateServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer
func (mr *MockSubTaskClientMockRecorder) CreateServer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockSubTaskClient)(nil).CreateServer), varargs...)
}

// CreateServerCompare mocks base method
func (m *MockSubTaskClient) CreateServerCompare(arg0 context.Context, arg1 *subtask.CreateServerCompareRequest, arg2 ...grpc.CallOption) (*subtask.CreateServerCompareResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServerCompare", varargs...)
	ret0, _ := ret[0].(*subtask.CreateServerCompareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerCompare indicates an expected call of CreateServerCompare
func (mr *MockSubTaskClientMockRecorder) CreateServerCompare(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerCompare", reflect.TypeOf((*MockSubTaskClient)(nil).CreateServerCompare), varargs...)
}

// GetLog mocks base method
func (m *MockSubTaskClient) GetLog(arg0 context.Context, arg1 *subtask.GetLogRequest, arg2 ...grpc.CallOption) (*subtask.GetLogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLog", varargs...)
	ret0, _ := ret[0].(*subtask.GetLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog
func (mr *MockSubTaskClientMockRecorder) GetLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockSubTaskClient)(nil).GetLog), varargs...)
}
