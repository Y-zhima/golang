// Code generated by MockGen. DO NOT EDIT.
// Source: git.fogcdn.top/axe/protos/goout/task (interfaces: TaskClient)

// Package mock_task is a generated GoMock package.
package mock_task

import (
	context "context"
	task "git.fogcdn.top/axe/protos/goout/task"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTaskClient is a mock of TaskClient interface
type MockTaskClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaskClientMockRecorder
}

// MockTaskClientMockRecorder is the mock recorder for MockTaskClient
type MockTaskClientMockRecorder struct {
	mock *MockTaskClient
}

// NewMockTaskClient creates a new mock instance
func NewMockTaskClient(ctrl *gomock.Controller) *MockTaskClient {
	mock := &MockTaskClient{ctrl: ctrl}
	mock.recorder = &MockTaskClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskClient) EXPECT() *MockTaskClientMockRecorder {
	return m.recorder
}

// CheckServerState mocks base method
func (m *MockTaskClient) CheckServerState(arg0 context.Context, arg1 *task.CheckServerStateRequest, arg2 ...grpc.CallOption) (*task.CheckServerStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckServerState", varargs...)
	ret0, _ := ret[0].(*task.CheckServerStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckServerState indicates an expected call of CheckServerState
func (mr *MockTaskClientMockRecorder) CheckServerState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckServerState", reflect.TypeOf((*MockTaskClient)(nil).CheckServerState), varargs...)
}

// Create mocks base method
func (m *MockTaskClient) Create(arg0 context.Context, arg1 *task.CreateRequest, arg2 ...grpc.CallOption) (*task.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*task.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTaskClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskClient)(nil).Create), varargs...)
}

// CreateServer mocks base method
func (m *MockTaskClient) CreateServer(arg0 context.Context, arg1 *task.CreateServerRequest, arg2 ...grpc.CallOption) (*task.CreateServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServer", varargs...)
	ret0, _ := ret[0].(*task.CreateServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer
func (mr *MockTaskClientMockRecorder) CreateServer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockTaskClient)(nil).CreateServer), varargs...)
}

// CreateServerCompare mocks base method
func (m *MockTaskClient) CreateServerCompare(arg0 context.Context, arg1 *task.CreateServerCompareRequest, arg2 ...grpc.CallOption) (*task.CreateServerCompareResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateServerCompare", varargs...)
	ret0, _ := ret[0].(*task.CreateServerCompareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerCompare indicates an expected call of CreateServerCompare
func (mr *MockTaskClientMockRecorder) CreateServerCompare(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerCompare", reflect.TypeOf((*MockTaskClient)(nil).CreateServerCompare), varargs...)
}

// Filter mocks base method
func (m *MockTaskClient) Filter(arg0 context.Context, arg1 *task.FilterRequest, arg2 ...grpc.CallOption) (*task.FilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(*task.FilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter
func (mr *MockTaskClientMockRecorder) Filter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockTaskClient)(nil).Filter), varargs...)
}

// Get mocks base method
func (m *MockTaskClient) Get(arg0 context.Context, arg1 *task.GetRequest, arg2 ...grpc.CallOption) (*task.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*task.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTaskClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskClient)(nil).Get), varargs...)
}

// GetLog mocks base method
func (m *MockTaskClient) GetLog(arg0 context.Context, arg1 *task.GetLogRequest, arg2 ...grpc.CallOption) (*task.GetLogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLog", varargs...)
	ret0, _ := ret[0].(*task.GetLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog
func (mr *MockTaskClientMockRecorder) GetLog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockTaskClient)(nil).GetLog), varargs...)
}

// GetSubTask mocks base method
func (m *MockTaskClient) GetSubTask(arg0 context.Context, arg1 *task.GetSubTaskRequest, arg2 ...grpc.CallOption) (*task.GetSubTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubTask", varargs...)
	ret0, _ := ret[0].(*task.GetSubTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubTask indicates an expected call of GetSubTask
func (mr *MockTaskClientMockRecorder) GetSubTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubTask", reflect.TypeOf((*MockTaskClient)(nil).GetSubTask), varargs...)
}

// InstallServer mocks base method
func (m *MockTaskClient) InstallServer(arg0 context.Context, arg1 *task.InstallServerRequest, arg2 ...grpc.CallOption) (*task.InstallServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallServer", varargs...)
	ret0, _ := ret[0].(*task.InstallServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallServer indicates an expected call of InstallServer
func (mr *MockTaskClientMockRecorder) InstallServer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallServer", reflect.TypeOf((*MockTaskClient)(nil).InstallServer), varargs...)
}

// Retry mocks base method
func (m *MockTaskClient) Retry(arg0 context.Context, arg1 *task.RetryRequest, arg2 ...grpc.CallOption) (*task.RetryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Retry", varargs...)
	ret0, _ := ret[0].(*task.RetryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retry indicates an expected call of Retry
func (mr *MockTaskClientMockRecorder) Retry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockTaskClient)(nil).Retry), varargs...)
}

// ServerPowerControl mocks base method
func (m *MockTaskClient) ServerPowerControl(arg0 context.Context, arg1 *task.ServerPowerControlRequest, arg2 ...grpc.CallOption) (*task.ServerPowerControlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerPowerControl", varargs...)
	ret0, _ := ret[0].(*task.ServerPowerControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerPowerControl indicates an expected call of ServerPowerControl
func (mr *MockTaskClientMockRecorder) ServerPowerControl(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerPowerControl", reflect.TypeOf((*MockTaskClient)(nil).ServerPowerControl), varargs...)
}
