// Code generated by MockGen. DO NOT EDIT.
// Source: git.fogcdn.top/axe/protos/goout/template (interfaces: TemplateClient)

// Package mock_template is a generated GoMock package.
package mock_template

import (
	context "context"
	template "git.fogcdn.top/axe/protos/goout/template"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTemplateClient is a mock of TemplateClient interface
type MockTemplateClient struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateClientMockRecorder
}

// MockTemplateClientMockRecorder is the mock recorder for MockTemplateClient
type MockTemplateClientMockRecorder struct {
	mock *MockTemplateClient
}

// NewMockTemplateClient creates a new mock instance
func NewMockTemplateClient(ctrl *gomock.Controller) *MockTemplateClient {
	mock := &MockTemplateClient{ctrl: ctrl}
	mock.recorder = &MockTemplateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateClient) EXPECT() *MockTemplateClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTemplateClient) Create(arg0 context.Context, arg1 *template.CreateRequest, arg2 ...grpc.CallOption) (*template.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*template.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTemplateClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTemplateClient)(nil).Create), varargs...)
}

// Delete mocks base method
func (m *MockTemplateClient) Delete(arg0 context.Context, arg1 *template.DeleteRequest, arg2 ...grpc.CallOption) (*template.DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*template.DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockTemplateClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTemplateClient)(nil).Delete), varargs...)
}

// Filter mocks base method
func (m *MockTemplateClient) Filter(arg0 context.Context, arg1 *template.FilterRequest, arg2 ...grpc.CallOption) (*template.FilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(*template.FilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter
func (mr *MockTemplateClientMockRecorder) Filter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockTemplateClient)(nil).Filter), varargs...)
}

// Get mocks base method
func (m *MockTemplateClient) Get(arg0 context.Context, arg1 *template.GetRequest, arg2 ...grpc.CallOption) (*template.GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*template.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockTemplateClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTemplateClient)(nil).Get), varargs...)
}

// Update mocks base method
func (m *MockTemplateClient) Update(arg0 context.Context, arg1 *template.UpdateRequest, arg2 ...grpc.CallOption) (*template.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*template.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockTemplateClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTemplateClient)(nil).Update), varargs...)
}

// UpdateState mocks base method
func (m *MockTemplateClient) UpdateState(arg0 context.Context, arg1 *template.UpdateStateRequest, arg2 ...grpc.CallOption) (*template.UpdateStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateState", varargs...)
	ret0, _ := ret[0].(*template.UpdateStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateState indicates an expected call of UpdateState
func (mr *MockTemplateClientMockRecorder) UpdateState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockTemplateClient)(nil).UpdateState), varargs...)
}
