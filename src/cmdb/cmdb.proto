syntax = "proto3";

package cmdb;

option go_package = "git.fogcdn.top/axe/protos/goout/cmdb";
option java_package = "top.fogcdn.axe.protos.cmdb";

import "common/api.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// 主机
service Cmdb {
    // 实例拓扑
    rpc InstanceTopology (InstanceTopologyRequest) returns (InstanceTopologyResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/instanceTopology"
        };
    }

    // 查找主机
    rpc SearchHost (SearchHostRequest) returns (SearchHostResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/searchHost"
        };
    }

    // 导入主机
    rpc ImportHost (ImportHostRequest) returns (ImportHostResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importHost"
            body: "*"
        };
    }

    // 导入物理机
    rpc ImportServer (ImportServerRequest) returns (ImportServerResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importServer"
            body: "*"
        };
    }

    // 导入交换机
    rpc ImportSwitch (ImportSwitchRequest) returns (ImportSwitchResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importSwitch"
            body: "*"
        };
    }

    // 导入lake节点
    rpc ImportLake (ImportLakeRequest) returns (ImportLakeResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importLake"
            body: "*"
        };
    }

<<<<<<< HEAD
    // 机房拓扑
    rpc RoomTopology (RoomTopologyRequest) returns (RoomTopologyResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/roomTopology"
        };
    }

    rpc ServerList(ServerListRequest) returns (ServerListResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/serverList"
=======
    // 查询模块
    rpc SearchModule (SearchMoudleRequest) returns (SearchMoudleResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/searchModule"
>>>>>>> master
        };
    }
}

// 业务拓扑对象
message TopologyObject {
    // 业务ID
    int32 bk_inst_id = 1;
    // 业务名称
    string bk_inst_name = 2;
    // 对象ID
    string bk_obj_id = 3;
    // 对象名称
    string bk_obj_name = 4;
    // 子对象
    repeated TopologyObject child = 5;
}

// 拓扑实例请求
message InstanceTopologyRequest {
    //    int32 level = 1;
}

// 拓扑实例请求返回
message InstanceTopologyResponse {
    // 业务拓扑对象
    TopologyObject instance = 1;
    // 状态码
    common.ResponseStatus status = 2;
}

// 主机
message HostObject {
    // 内网IP
    string bk_host_innerip = 1;
    // 主机ID
    int32 bk_host_id = 2;
}

// 模块
message ModuleObject {
    // 模块名
    string bk_module_name = 1;
    // 模块ID
    int32 bk_module_id = 2;
}

// 集群
message SetObject {
    // 集群名
    string bk_set_name = 1;
    // 集群ID
    int32 bk_set_id = 2;
}

// 区域
message ZoneObject {
    // 区域ID
    int32 bk_inst_id = 1;
}

// 业务
message BizObject {
    // 业务名
    string bk_biz_name = 1;
    // 业务ID
    int32 bk_biz_id = 2;
}

// 通用对象，包括机房 交换机 物理机
message CommonObject {
    // 实例ID
    int32 bk_inst_id = 1;
    // 实例名称
    string bk_inst_name = 2;
    // 实例属对象
    string bk_obj_id = 3;
}

// 关联关系请求
message CreateAssociationRequest {
    // 实例关联唯一标识
    string bk_obj_asst_id = 1;
    // 源实例ID
    int32 bk_inst_id = 2;
    // 目标实例ID
    int32 bk_asst_inst_id = 3;
}

// 主机内容信息
message HostInfoObject {
    // 主机对象
    HostObject host = 1;
    // 模块对象
    repeated ModuleObject module = 2;
    // 集群对象
    repeated SetObject set = 3;
    // 业务对象
    repeated BizObject biz = 4;
}

// 查找主机请求
message SearchHostRequest {
    // 分页信息
    common.Paging paging = 1;
    // 主机对象
    HostObject host = 2;
    // 模块对象
    ModuleObject module = 3;
    // 集群对象
    SetObject set = 4;
    // 业务对象
    BizObject biz = 5;
    // 区域对象
    ZoneObject zone = 6;
}

// 查找主机请求返回
message SearchHostResponse {
    // 分页信息
    common.Paging paging = 1;
    // 状态码
    common.ResponseStatus status = 2;
    // 主机信息
    repeated HostInfoObject info = 3;
}

// 导入主机请求
message ImportHostRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"
                   }];
}

// 导入主机请求返回
message ImportHostResponse {
    // 状态码
    common.ResponseStatus status = 1;
}

// 导入物理机请求
message ImportServerRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"
                   }];
}

// 导入物理机请求返回
message ImportServerResponse {
    // 状态码
    common.ResponseStatus status = 1;
}

// 选择主机请求
message ChooseHostRequest {
    // 集群ID
    int32 bk_set_id = 1;
    // 模块ID
    repeated int32 bk_module_id = 2;
}

// 导入交换机请求
message ImportSwitchRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"
                   }];
}

// 导入交换机请求返回
message ImportSwitchResponse {
    // 状态码
    common.ResponseStatus status = 1;
}

// 导入lake节点请求
message ImportLakeRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"
                   }];
}

// 导入lake节点请求返回
message ImportLakeResponse {
    // 状态码
    common.ResponseStatus status = 1;
}

<<<<<<< HEAD
// 机房拓扑对象
message RoomTopology {
    // 省份
    string prov = 1;
    // 城市列表
    repeated RoomCityObject cities = 2;
}

// 机房城市对象
message RoomCityObject {
    // 城市
    string city = 1;
    // 机房列表
    repeated RoomObject rooms = 2;
}

// 机房对象
message RoomObject {
    // 业务ID
    int32 bk_inst_id = 1;
    // 业务名称
    string bk_inst_name = 2;
    // 对象ID
    string bk_obj_id = 3;
    // 机房名称
    string room_name = 4;
    // 城市
    string city = 5;
    // 省份
    string prov = 6;
}

// 机房拓扑请求
message RoomTopologyRequest {
    // 分页信息
//    common.Paging paging = 1;
    // 省份
//    string prov = 2;
    // 城市
//    string city = 3;
    // 机房名称
//    string room_name = 4;
}

// 机房拓扑请求返回
message RoomTopologyResponse {
    // 业务拓扑对象
    repeated RoomTopology roomTopology = 1;
    // 状态码
    common.ResponseStatus status = 2;
}


// 电源状态
enum ServerPowerState {
    // 下电
    OFF = 0;
    // 上电
    ON = 1;
}

// 装机状态
enum ServerInstallState {
    // 未装机
    UNINSTALLED = 0;
    // 装机中
    INSTALLING = 1;
    // 已装机
    INSTALLED = 2;
}

// 物理机对象
message ServerObject {
    //实例名
    string bk_inst_name = 1;
    // IPMI地址
    string manage_ip = 2;
    // IPMI账号
    string account = 3;
    // IPMI密码
    string password = 4;
    // MAC地址
    string mac_address = 5;
    // uuid编码
    string uuid = 6;
    // 机柜
    string cabinet = 7;
    // IPMI端口
    string port = 8;
    // 电源状态
    ServerPowerState power_state = 9;
    // 装机状态
    ServerInstallState install_state = 10;
    // 机房id
    int64 room_id = 11;
}

// 裸金属列表请求
message ServerListRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["room_id"]
        }
    };

    // 机房id，相当于 RoomObject 中的 bk_inst_id
    int64 room_id = 1;
    // 分页信息
    common.Paging paging = 2;
}

// 裸金属列表响应
message ServerListResponse {
    // 裸金属列表
    repeated ServerObject servers = 1;
    // 分页信息
    common.Paging paging = 2;
    // 返回的请求状态
    common.ResponseStatus status = 3;
}
=======
// 查询模块请求
message SearchMoudleRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["cmdb_search_request"]
        }
    };
    ChooseHostRequest cmdb_search_request = 1 [(validator.field) = {string_not_empty: true, human_error: "cmdb的搜索条件不能为空"
                                                       }];
}

// 查询模块请求返回
message SearchMoudleResponse {
    // 状态码
    common.ResponseStatus status = 1;
    // 模块对象
    repeated ModuleObject moudule = 2;
}
>>>>>>> master
