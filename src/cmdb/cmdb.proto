syntax = "proto3";

package cmdb;

option go_package = "git.fogcdn.top/axe/protos/goout/cmdb";
option java_package = "top.fogcdn.axe.protos.cmdb";

import "common/api.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// 主机
service Cmdb {
    // 实例拓扑
    rpc InstanceTopology (InstanceTopologyRequest) returns (InstanceTopologyResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/instanceTopology"
        };
    }

    // 查找主机
    rpc SearchHost (SearchHostRequest) returns (SearchHostResponse) {
        option (google.api.http) = {
            get: "/v1/cmdb/searchHost"
        };
    }

    // 导入主机
    rpc ImportHost (ImportHostRequest) returns (ImportHostResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importHost"
            body: "*"
        };
    }

    // 导入交换机
    rpc ImportSwitch (ImportSwitchRequest) returns (ImportSwitchResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importSwitch"
            body: "*"
        };
    }

    // 导入lake节点
    rpc ImportLake (ImportLakeRequest) returns (ImportLakeResponse) {
        option (google.api.http) = {
            post: "/v1/cmdb/importLake"
            body: "*"
        };
    }
}

// 业务拓扑对象
message TopologyObject {
    // 业务ID
    int32 bk_inst_id = 1;
    // 业务名称
    string bk_inst_name = 2;
    // 对象ID
    string bk_obj_id = 3;
    // 对象名称
    string bk_obj_name = 4;
    // 子对象
    repeated TopologyObject child = 5;
}

// 拓扑实例请求
message InstanceTopologyRequest {
//    int32 level = 1;
}

// 拓扑实例请求返回
message InstanceTopologyResponse {
    // 业务拓扑对象
    TopologyObject instance = 1;
    // 状态码
    common.ResponseStatus status = 2;
}

// 主机
message HostObject {
    // 内网IP
    string bk_host_innerip = 1;
    // 主机ID
    int32 bk_host_id = 2;
}

// 模块
message ModuleObject {
    // 模块名
    string bk_module_name = 1;
    // 模块ID
    int32 bk_module_id = 2;
}

// 集群
message SetObject {
    // 集群名
    string bk_set_name = 1;
    // 集群ID
    int32 bk_set_id = 2;
}

// 区域
message ZoneObject {
    // 区域ID
    int32 bk_inst_id = 1;
}

// 业务
message BizObject {
    // 业务名
    string bk_biz_name = 1;
    // 业务ID
    int32 bk_biz_id = 2;
}

// 通用对象，包括机房 交换机 物理机
message CommonObject {
    // 实例ID
    int32 bk_inst_id = 1;
    // 实例名称
    string bk_inst_name = 2;
    // 实例属对象
    string bk_obj_id = 3;
}

// 关联关系请求
message CreateAssociationRequest {
    // 实例关联唯一标识
    string bk_obj_asst_id = 1;
    // 源实例ID
    int32 bk_inst_id = 2;
    // 目标实例ID
    int32 bk_asst_inst_id = 3;
}

// 主机内容信息
message HostInfoObject {
    // 主机对象
    HostObject host = 1;
    // 模块对象
    repeated ModuleObject module = 2;
    // 集群对象
    repeated SetObject set = 3;
    // 业务对象
    repeated BizObject biz = 4;
}

// 查找主机请求
message SearchHostRequest {
    // 分页信息
    common.Paging paging = 1;
    // 主机对象
    HostObject host = 2;
    // 模块对象
    ModuleObject module = 3;
    // 集群对象
    SetObject set = 4;
    // 业务对象
    BizObject biz = 5;
    // 区域对象
    ZoneObject zone = 6;
}

// 查找主机请求返回
message SearchHostResponse {
    // 分页信息
    common.Paging paging = 1;
    // 状态码
    common.ResponseStatus status = 2;
    // 主机信息
    repeated HostInfoObject info = 3;
}

// 导入主机请求
message ImportHostRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"}];
}

// 导入主机请求返回
message ImportHostResponse {
    // 状态码
    common.ResponseStatus status = 1;
}

// 选择主机请求
message ChooseHostRequest {
    // 集群ID
    int32 bk_set_id = 1;
    // 模块ID
    repeated int32 bk_module_id = 2;
}


// 导入交换机请求
message ImportSwitchRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"}];
}


// 导入交换机请求返回
message ImportSwitchResponse {
    // 状态码
    common.ResponseStatus status = 1;
}

// 导入lake节点请求
message ImportLakeRequest {
    // csv文件下载路径
    string url = 1 [(validator.field) = {string_not_empty: true, human_error: "URL不能为空"}];
}


// 导入lake节点请求返回
message ImportLakeResponse {
    // 状态码
    common.ResponseStatus status = 1;
}