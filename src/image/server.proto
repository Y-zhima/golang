syntax = "proto3";

package image;

option java_multiple_files = true;
option java_package = "com.ffcs.xmrdc.ironic.mirror.grpc.imageServer";
option java_outer_classname = "imageServerProto";

option go_package = "git.fogcdn.top/axe/protos/goout/image";

import "image/common.proto";

service Image {
    // 查询镜像列表
    rpc Query (QueryRequest) returns (QueryResponse) {}
    // 健康监测
    rpc Heatlth (HeatlthRequest) returns (HeatlthResponse) {}
}

//系统类型
enum ImageType {
    IMAGE_TYPE_UNDEFINED = 0;
    IMAGE_TYPE_CENTOS = 1;
    IMAGE_TYPE_UBUNTU = 2;
    IMAGE_TYPE_OPENSUSE = 3;
}
//镜像格式
enum ImageFormat{
    IMAGE_FORMAT_UNDEFINED = 0;
    IMAGE_FORMAT_ISO = 1;
    IMAGE_FORMAT_QCOW2 = 2;
}

//--------------- 查询镜像列表---------------//
message QueryRequest{
    //镜像名称
    string image_name = 1;
    //系统类型，使用枚举，比如常用的CentOS\Ubuntu\openSUSE等
    ImageType image_type = 2;
    //系统大版本号，比如CentOS的7.4,7.5,7.6等
    string version  = 3;
    //系统的小版本号，例如CentOS7.4下的1708
    string sub_version  = 4;
    //镜像的格式，使用枚举，例如iso，qcow2等
    ImageFormat format = 5;
    // 镜像附加属性
    repeated ImageAttr image_attrs = 6;
    //若没有入参，则默认查询阈值为第一页10条记录
    image.PageInfo page_info = 7;
}
message ImageAttr {
    //属性、标签名称：例如docker
    string attr_name = 1;
    //属性、标签的附加信息类型，例如可以说明是version表示版本号
    string attr_add_type = 2;
    //属性、标签附加的值,例docker的版本CE或者EE
    string attr_add_value  = 3;
}

message QueryResponse {
    // 响应码
    image.ResponseStatus status = 1;
    // 响应对象
    repeated ImageObject images = 2;
    image.PageInfo page_info = 3;
}

message ImageObject {
    // 镜像标识
    int64 image_id = 1;
    //镜像名称
    string image_name = 2;
    //系统类型，使用枚举，比如常用的CentOS\Ubuntu\openSUSE等
    ImageType image_type = 3;
    //系统大版本号，比如CentOS的7.4,7.5,7.6等
    string version  = 4;
    //系统的小版本号，例如CentOS7.4下的1708
    string sub_version  = 5;
    //镜像的格式，使用枚举，例如iso，qcow2等
    ImageFormat format = 6;
    // 镜像md5完整性校验码
    string check_sum = 7;
    // 镜像存储在ceph或者其他后端存储的路径或者访问地址
    string uri = 8;
    // 镜像附加信息
    string remark = 9;
    // 镜像附加属性
    repeated ImageAttr image_attrs = 10;
}

//--------------- 镜像查询查询结束 ---------------//

//--------------- 健康监测---------------//
message HeatlthRequest {
    // 不需要请求体
}


message HeatlthResponse {
    // 响应码
    image.ResponseStatus status = 1;
    // 响应对象
    repeated  ClusterInstance cluster_instances = 2;
}

// 节点信息
message ClusterInstance {
    // 应用ip
    string ip_address=1;
    //应用名，集群名
    string cluster_name=2;
    //运行状态
    AppStatus app_status=3;
    //信息
    string message=4;
}

enum AppStatus{
    //未知
    APP_STATUS_UNDEFINED = 0;
    // 活动中
    APP_STATUS_STOPPED = 1;
    //未知
    APP_STATUS_ACTIVE =2;
    // 已停止
    APP_STATUS_UNKNOWN = 3;
}
//--------------- 健康监测结束---------------//