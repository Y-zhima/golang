syntax = "proto3";

package template;

option go_package = "git.fogcdn.top/axe/protos/goout/template";
option java_package = "top.fogcdn.axe.protos.template";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

import "common/api.proto";
import "common/user.proto";
import "playbook/playbook.proto";

// 作业模板
service Template {
    // 创建作业模板
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/template/create"
            body: "*"
        };
    }
    // 筛选作业模板
    rpc Filter (FilterRequest) returns (FilterResponse) {
        option (google.api.http) = {
            get: "/v1/template/filter"
        };
    }
    // 获取作业模板
    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/template/get/{template_id}"
        };
    }
    // 更新作业模板
    rpc Update (UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            post: "/v1/template/update/{template_id}"
            body: "*"
        };
    }
    // 更新作业模板状态开关
    rpc UpdateState (UpdateStateRequest) returns (UpdateStateResponse) {
        option (google.api.http) = {
            post: "/v1/template/updateState/{template_id}"
            body: "*"
        };
    }
    // 删除作业模板
    rpc Delete (DeleteRequest) returns (DeleteResponse) {
        //        option (google.api.http) = {
        //            post: "/v1/template/delete/{template_id}"
        //        };
    }
}

// 模板实例
message TemplateObject {
    // 模板ID
    int32 template_id = 1;
    // 模板名
    string name = 2;
    // 模板描述
    string description = 3;
    // playbook 项目
    playbook.ProjectObject playbook = 4;
    // 选择的playbook项目对应的playbook_file
    int32 playbook_file_id = 5;
    // 选择的playbook入口yml文件
    int32 playbook_entrypoint_id = 6;
    // 额外变量
    string extra_var = 7;
    // 创建人
    common.User creator = 8;
    // 创建时间
    string created = 9;
    // 更新时间
    string updated = 10;
    // 模板状态开关标识
    TemplateState state = 11;
    // 模板发布状态码，用于标记某些特定的模板，相同release code默认使用最进更新的template
    ReleaseCode release_code = 12;

}

// 创建模板请求
message CreateRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["name", "playbook_id", "playbook_file_id", "playbook_entrypoint_id"]
        }
    };
    // 模板名
    string name = 1 [(validator.field) = {string_not_empty: true, human_error: "模板名称不能为空"}];
    // playbook 项目id
    int32 playbook_id = 2 [(validator.field) = {int_gt: 0, human_error: "项目ID不能为空"}];
    // 选择的playbook项目对应的playbook_file
    int32 playbook_file_id = 3 [(validator.field) = {int_gt: 0, human_error: "项目文件ID不能为空"}];
    // 选择的playbook入口yml文件
    int32 playbook_entrypoint_id = 4 [(validator.field) = {int_gt: 0, human_error: "项目入口文件ID不能为空"}];
    // 模板描述
    string description = 5;
    // 额外变量JSON String 例如： {"key":"testKey","value":"testVal","description":"测试描述"}
    string extra_var = 6;
    // 模板发布状态码，用于标记某些特定的模板，相同release code默认使用最进更新的template
    ReleaseCode release_code = 7;

}

// 创建模板请求返回
message CreateResponse {
    // 模板ID
    int32 template_id = 1;
    // 模板创建的时间
    string created = 2;
    // 请求返回状态
    common.ResponseStatus status = 3;
}

message GetRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["template_id"]
        }
    };
    // 模板ID
    int32 template_id = 1;
    // 模板发布状态码，用于标记某些特定的模板，相同release code默认获取最新的template(优先匹配template_id)
    ReleaseCode release_code = 2;

}

// 获取模板请求返回
message GetResponse {
    // 请求返回的模板
    TemplateObject template = 1;
    // 请求返回状态
    common.ResponseStatus status = 2;
}

// 筛选模板请求
message FilterRequest {
    // 分页信息
    common.Paging paging = 1;
    // 模板名的一部分，模糊查询时的关键字
    string name = 2;
    // 模板ID
    string template_id = 3;
}

// 筛选模板请求返回
message FilterResponse {
    // 请求返回的模板
    repeated TemplateObject templates = 1;
    // 分页信息
    common.Paging paging = 2;
    // 请求返回状态
    common.ResponseStatus status = 3;
}

// 更新模板请求
message UpdateRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["template_id", "name"]
        }
    };
    // 模板ID
    int32 template_id = 1 [(validator.field) = {int_gt: 0, human_error: "模板ID不能为空"}];
    // 模板名
    string name = 2 [(validator.field) = {string_not_empty: true, human_error: "模板名称不能为空"}];
    // 模板描述
    string description = 3;
    // 额外变量JSON String 例如： {"key":"testKey","value":"testVal","description":"测试描述"}
    string extra_var = 4;
    // 模板发布状态码，用于标记某些特定的模板，相同release code默认使用最进更新的template
    ReleaseCode release_code = 5;

}

// 更新请求返回
message UpdateResponse {
    // 模板更新的时间
    string updated = 1;
    // 请求返回的状态
    common.ResponseStatus status = 2;
}


// 更新模板状态开关请求
message UpdateStateRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          required: ["template_id"]
        }
    };
    // 模板ID
    int32 template_id = 1 [(validator.field) = {int_gt: 0, human_error: "模板ID不能为空"}];
    // 模板状态开关标识
    TemplateState state = 2 [(validator.field) = {is_in_enum : true, human_error: "State类型不正确"}];
}

// 更新模板状态请求返回
message UpdateStateResponse {
    // 请求返回的状态
    common.ResponseStatus status = 1;
}


// 删除模板请求
message DeleteRequest {
    //模板ID
    int32 template_id = 1;
}

// 删除请求返回
message DeleteResponse {
    // 请求返回的状态
    common.ResponseStatus status = 1;
}

// 模板状态
enum TemplateState {
    // 没运行
    OFF = 0;
    // 运行
    ON = 1;
}

// 系统模板的Release code
enum ReleaseCode {
    RELEASE_CODE_UNDEFINED = 0;
    // 服务器巡检模板
    RELEASE_CODE_SERVER_COMPARE = 1;
    // 裸金属服务
    RELEASE_CODE_IRONIC_APP = 2;
}

